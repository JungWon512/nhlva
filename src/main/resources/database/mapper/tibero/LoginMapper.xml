<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="LoginMapper">

	<!-- 로그인 중도매인 리스트 조회 -->
	<select id="selectWholesalerList" parameterType="map" resultType="map">
		/*LoginMapper.selectWholesalerList_20221122_수정*/
		SELECT A.NA_BZPLC
			 , A.TRMN_AMNNO
			 , A.MWMN_NA_TRPL_C
			 , DECODE(A.SRA_MWMNNM, '***', B.SRA_MWMNNM, A.SRA_MWMNNM) AS SRA_MWMNNM
			 , A.FRLNO
			 , A.ZIP
			 , A.DONGUP
			 , A.DONGBW
			 , DECODE(A.OHSE_TELNO, '***', B.OHSE_TELNO, A.OHSE_TELNO) AS OHSE_TELNO
			 , DECODE(A.CUS_MPNO, '***', B.CUS_MPNO, A.CUS_MPNO) AS CUS_MPNO
			 , A.MACO_YN
			 , A.JRDWO_DSC
			 , A.PSN_INF_OFR_AGR_YN
			 , A.TMS_YN
			 , A.DEL_YN
			 , A.RMK_CNTN
			 , DECODE(A.CUS_RLNO, '***', B.CUS_RLNO, A.CUS_RLNO) AS CUS_RLNO
			 , A.LSCHG_DTM
			 , A.LS_CMENO
			 , A.FSRG_DTM
			 , A.FSRGMN_ENO
			 , NVL(A.MB_INTG_NO, '') AS MB_INTG_NO
		  FROM TB_LA_IS_MM_MWMN A
		 	LEFT OUTER JOIN TB_LA_IS_BK_DORM_MWMN B
		 	ON(A.NA_BZPLC = B.NA_BZPLC
				AND A.TRMN_AMNNO = B.TRMN_AMNNO
			)
		 WHERE (
			 	(
				 	REPLACE(TRIM(A.SRA_MWMNNM),' ','') = REPLACE(TRIM(#{userName}),' ','')
				    AND REPLACE(TRIM(A.CUS_RLNO),' ','') = REPLACE(TRIM(#{birthDate}),' ','')
			 	)
			 	OR
			 	(
			 		REPLACE(TRIM(NVL(B.SRA_MWMNNM, '')),' ','') = REPLACE(TRIM(#{userName}),' ','')
				    AND REPLACE(TRIM(NVL(B.CUS_RLNO, '')),' ','') = REPLACE(TRIM(#{birthDate}),' ','')
			 	)
   			)
		   AND A.DEL_YN = '0'
		   AND EXISTS (
				SELECT 1 FROM TB_LA_IS_BM_BZLOC B WHERE B.NA_BZPLC = A.NA_BZPLC AND B.NA_BZPLCNO = #{place}
			 )
	</select>
	
	<!-- 조합코드(NA_BZPLC)와 거래인 관리번호(TRMN_AMNNO)로 중도매인 조회 -->
	<select id="selectWholesaler" parameterType="map" resultType="map">
		SELECT A.NA_BZPLC
			 , B.NA_BZPLCNO 
			 , A.TRMN_AMNNO
			 , A.MWMN_NA_TRPL_C
			 , A.SRA_MWMNNM
			 , A.FRLNO
			 , A.ZIP
			 , A.DONGUP
			 , A.DONGBW
			 , A.OHSE_TELNO
			 , CASE WHEN A.CUS_MPNO IS NULL THEN ''
			   ELSE 
				 	CASE WHEN INSTR(A.CUS_MPNO, '-') <![CDATA[>]]> 0 THEN A.CUS_MPNO
				 	ELSE REGEXP_REPLACE(TRIM(A.CUS_MPNO), '(.{3})(.+)(.{4})', '\1-\2-\3') 
				   	END 
			   END CUS_MPNO
			 , A.MACO_YN
			 , A.JRDWO_DSC
			 , A.PSN_INF_OFR_AGR_YN
			 , A.TMS_YN
			 , A.DEL_YN
			 , A.RMK_CNTN
			 , A.CUS_RLNO
			 , A.LSCHG_DTM
			 , A.LS_CMENO
			 , A.FSRG_DTM
			 , A.FSRGMN_ENO
			 , A.SMS_YMD
			 , A.SMS_NO
			 , NVL(A.MB_INTG_NO, '') AS MB_INTG_NO
		  FROM TB_LA_IS_MM_MWMN A
		  LEFT OUTER JOIN TB_LA_IS_BM_BZLOC B
		    ON ( A.NA_BZPLC = B.NA_BZPLC )
		 WHERE A.NA_BZPLC = #{naBzplc}
		   AND A.TRMN_AMNNO = #{trmnAmnno}
		   <if test="naBzplcno != null and naBzplcno != ''">
		   		AND B.NA_BZPLCNO = #{naBzplcno}
		   </if>
		   AND A.DEL_YN = '0'
	</select>
	
	<!-- 로그인 출하주 정보 조회 -->
	<select id="selectFarmUserList" parameterType="map" resultType="map">
		/*LoginMapper.selectFarmUserList_20221122_수정*/
		SELECT A.NA_BZPLC
			 , A.FHS_ID_NO ||  '-' || A.FARM_AMNNO AS TRMN_AMNNO
			 , A.FHS_ID_NO
			 , A.FARM_AMNNO
			 , A.NA_TRPL_C
			 , DECODE(A.FTSNM, '***', B.FTSNM, A.FTSNM) AS FTSNM
			 , A.ZIP
			 , A.DONGUP
			 , A.DONGBW
			 , DECODE(A.OHSE_TELNO, '***', B.OHSE_TELNO, A.OHSE_TELNO) AS OHSE_TELNO
			 , DECODE(A.CUS_MPNO, '***', B.CUS_MPNO, A.CUS_MPNO) AS CUS_MPNO
			 , A.MACO_YN
			 , A.RMK_CNTN
			 , A.JRDWO_DSC
			 , A.DEL_YN
			 , A.ANW_YN
			 , A.HDWK_RG_YN
			 , A.SRA_FARM_ACNO
			 , A.NEW_SRA_FARM_ACNO
			 , A.SRA_FED_SPY_YN
			 , DECODE(A.BIRTH, '***', B.BIRTH, A.BIRTH) AS BIRTH
			 , A.FSRG_DTM
			 , A.FSRGMN_ENO
			 , A.LSCHG_DTM
			 , A.LS_CMENO
			 , NVL(A.MB_INTG_NO, '') AS MB_INTG_NO
		  FROM TB_LA_IS_MM_FHS A
		 	LEFT OUTER JOIN TB_LA_IS_BK_DORM_FHS B
		 	ON(A.NA_BZPLC = B.NA_BZPLC
		  		AND A.FHS_ID_NO = B.FHS_ID_NO
		  		AND A.FARM_AMNNO = B.FARM_AMNNO
	  		)
		 WHERE (
		 		REPLACE(TRIM(A.FTSNM),' ','') = REPLACE(TRIM(#{userName}),' ','')
		 		OR REPLACE(TRIM(NVL(B.FTSNM,'')),' ','') = REPLACE(TRIM(#{userName}),' ','')
		 	) 
		   AND (
		   		(
					REGEXP_REPLACE(A.OHSE_TELNO, '[^0-9]') = REGEXP_REPLACE(#{telNo}, '[^0-9]')
					OR
					REGEXP_REPLACE(A.CUS_MPNO, '[^0-9]') = REGEXP_REPLACE(#{telNo}, '[^0-9]')
		   		)
		   		OR
		   		(
			   		REGEXP_REPLACE(NVL(B.OHSE_TELNO, ''), '[^0-9]') = REGEXP_REPLACE(#{telNo}, '[^0-9]')
					OR
					REGEXP_REPLACE(NVL(B.CUS_MPNO, ''), '[^0-9]') = REGEXP_REPLACE(#{telNo}, '[^0-9]')
		   		)
			 )
		   AND A.DEL_YN = '0'
		   AND EXISTS (
				SELECT 1 FROM TB_LA_IS_BM_BZLOC C WHERE C.NA_BZPLC = A.NA_BZPLC AND C.NA_BZPLCNO = #{place}
			 )
		ORDER BY A.ANW_YN ASC	 
	</select>
	
	<!-- 조합코드(NA_BZPLC)와 농가 식별번호(FHS_ID_NO)로 출하주 조회 -->
	<select id="selectFarmUser" parameterType="map" resultType="map">
		SELECT A.NA_BZPLC
			 , B.NA_BZPLCNO
			 , A.FHS_ID_NO AS TRMN_AMNNO
			 , A.FHS_ID_NO
			 , A.FARM_AMNNO
			 , A.NA_TRPL_C
			 , A.FTSNM
			 , A.ZIP
			 , A.DONGUP
			 , A.DONGBW
			 , A.OHSE_TELNO
			 , CASE WHEN A.CUS_MPNO IS NULL THEN ''
			   ELSE 
				 	CASE WHEN INSTR(A.CUS_MPNO, '-') <![CDATA[>]]> 0 THEN A.CUS_MPNO
				 	ELSE REGEXP_REPLACE(TRIM(A.CUS_MPNO), '(.{3})(.+)(.{4})', '\1-\2-\3') 
				   	END 
			   END CUS_MPNO
			 , A.MACO_YN
			 , A.RMK_CNTN
			 , A.JRDWO_DSC
			 , A.DEL_YN
			 , A.ANW_YN
			 , A.HDWK_RG_YN
			 , A.SRA_FARM_ACNO
			 , A.NEW_SRA_FARM_ACNO
			 , A.SRA_FED_SPY_YN
			 , A.BIRTH
			 , A.FSRG_DTM
			 , A.FSRGMN_ENO
			 , A.LSCHG_DTM
			 , A.LS_CMENO
			 , NVL(A.MB_INTG_NO, '') AS MB_INTG_NO
		  FROM TB_LA_IS_MM_FHS A
		  LEFT OUTER JOIN TB_LA_IS_BM_BZLOC B
			ON ( A.NA_BZPLC = B.NA_BZPLC )
		 WHERE A.FHS_ID_NO = #{fhsIdNo}
		   AND A.FARM_AMNNO = #{farmAmnno}
		   AND A.NA_BZPLC = #{naBzplc}
		   AND A.DEL_YN = '0'
		<if test="naBzplcno != null and naBzplcno != ''">
		   AND B.NA_BZPLCNO = #{naBzplcno}
		</if>
	</select>
	
	<!-- 방문자 이력 저장 -->
	<insert id="insertVisitor" parameterType="map">
		INSERT INTO tb_la_is_bm_visit
		(
		    SEQ_NO,
		    VISIT_IP,
		    VISIT_DTM,
		    VISIT_REFER,
		    VISIT_AGENT
		)
		VALUES
		(
		    SQ_LA_IS_BM_VISIT.NEXTVAL,
		    #{visit_ip},
		    SYSDATE,
		    #{visit_refer},
		    #{visit_agent}
		)
	</insert>
	
	<!-- 인증번호 정보 조회 -->
	<select id="selectAuthNumberInfo" parameterType="map" resultType="map">
		SELECT SMS_YMD
			 , SMS_NO
			 , CUS_MPNO
			 , SRA_MWMNNM
		  FROM TB_LA_IS_MM_MWMN
		 WHERE NA_BZPLC = #{naBzplc}
		   AND TRMN_AMNNO = #{trmnAmnno}
	</select>
	
	<!-- 인증번호 정보 조회 -->
	<select id="selectAuthFhsNumberInfo" parameterType="map" resultType="map">
		SELECT SMS_YMD
			 , SMS_NO
			 , CUS_MPNO
			 , FTSNM 	AS SRA_MWMNNM
		  FROM TB_LA_IS_MM_FHS
		 WHERE NA_BZPLC = #{naBzplc}
		   AND FHS_ID_NO = #{fhsIdNo}
		   AND FARM_AMNNO = #{farmAmnno}
	</select>
	
	<!-- 새로 받급받은 인증번호 저장 (중도매인) -->
	<update id="updateAuthNumber" parameterType="map">
		UPDATE TB_LA_IS_MM_MWMN
		   SET SMS_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
			 , SMS_NO = #{smsNo}
		 WHERE NA_BZPLC = #{naBzplc}
		   AND TRMN_AMNNO = #{trmnAmnno}
	</update>
	<update id="updateKkoRefreshToekn" parameterType="map">
		UPDATE TB_LA_IS_MM_MWMN SET 
			KKO_TOKEN = #{kkoToken} 
		 WHERE NA_BZPLC = #{naBzplc}
		   AND TRMN_AMNNO = #{trmnAmnno}
	</update>
	
	<!-- 새로 받급받은 인증번호 저장 (출하주) -->
	<update id="updateAuthFhsNumber" parameterType="map">
		UPDATE TB_LA_IS_MM_FHS
		   SET SMS_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
			 , SMS_NO = #{smsNo}
		 WHERE NA_BZPLC = #{naBzplc}
		   AND FHS_ID_NO = #{fhsIdNo}
		   AND FARM_AMNNO = #{farmAmnno}
	</update>
	
	<insert id="sendSms" parameterType="map">
		<selectKey keyProperty="smsFwdgSqno" resultType="int" order="BEFORE">
			SELECT NVL(MAX(SMS_FWDG_SQNO)+1,1) AS NEXT_NUM
			  FROM TB_LA_IS_MM_SMS
			  WHERE NA_BZPLC = #{naBzplc}
			  AND SMS_FWDG_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
		</selectKey>
		INSERT INTO TB_LA_IS_MM_SMS (
			NA_BZPLC
			, SMS_FWDG_DT
			, SMS_FWDG_SQNO
			, AUC_OBJ_DSC
			, TRMN_AMNNO
			, DPAMN_DSC
			, SEL_STS_DSC
			, RMS_MN_NAME
			, SMS_RMS_MPNO
			, IO_TRMSNM
			, SMS_TRMS_TELNO
			, SMS_FWDG_CNTN
			, TMS_YN
			, TMS_CN
			, FSRG_DTM
			, FSRGMN_ENO
			, LSCHG_DTM
			, LS_CMENO
		) VALUES (
			#{naBzplc}
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, #{smsFwdgSqno}
			, #{aucObjDsc}
			, #{trmnAmnno}
			, '1'
			, '11'
			, #{rmsMnName}
			, #{smsRmsMpno}
			, #{ioTrmsnm}
			, #{smsTrmsTelno}
			, #{smsFwdgCntn}
			, #{tmsYn}
			, '0'
			, SYSDATE
			, 'SYSTEM'
			, SYSDATE
			, 'SYSTEM'
		)
		
	</insert>
	
	<update id="updateMbintgConDormInfo" parameterType="map">
		/*LoginMapper.updateMbintgConDormInfo_20221122_추가*/
		UPDATE TB_LA_IS_MM_MBINTG
		SET FNCON_DTM = SYSDATE
			, DORMDUE_DT = TO_CHAR(SYSDATE + 365, 'YYYYMMDD')
		WHERE MB_INTG_NO = #{MB_INTG_NO}
	</update>
	
	<update id="updateMmMwmnMbintgNo" parameterType="hashMap">
		/*LoginMapper.updateMmMwmnMbintgNo_20221125_추가*/
		MERGE INTO TB_LA_IS_MM_MWMN MWN
		USING (
			SELECT NA_BZPLC
				, TRMN_AMNNO
			FROM TB_LA_IS_MM_MWMN
			WHERE REPLACE(TRIM(SRA_MWMNNM),' ','') = REPLACE(TRIM(#{MB_INTG_NM}),' ','')
				AND REGEXP_REPLACE(CUS_MPNO, '[^0-9]') = REGEXP_REPLACE(#{MB_MPNO}, '[^0-9]')
				AND CUS_RLNO = #{MB_RLNO}
				AND MB_INTG_NO IS NULL
		) TBL
		ON(
			MWN.NA_BZPLC = TBL.NA_BZPLC
			AND MWN.TRMN_AMNNO = TBL.TRMN_AMNNO
		)
		WHEN MATCHED THEN
			UPDATE
			SET MWN.LSCHG_DTM = SYSDATE 
				, MWN.MB_INTG_NO =#{MB_INTG_NO}
	</update>
	
	<update id="updateMmFhsMbintgNo" parameterType="hashMap">
		/*LoginMapper.updateMmFhsMbintgNo_20221125_추가*/
		MERGE INTO TB_LA_IS_MM_FHS FHS
		USING (
			SELECT NA_BZPLC
				, FHS_ID_NO
				, FARM_AMNNO
			FROM TB_LA_IS_MM_FHS
			WHERE REPLACE(TRIM(FTSNM),' ','') = REPLACE(TRIM(#{MB_INTG_NM}),' ','')
				AND REGEXP_REPLACE(CUS_MPNO, '[^0-9]') = REGEXP_REPLACE(#{MB_MPNO}, '[^0-9]')
				<if test="MB_RLNO != null and MB_RLNO != ''">
				AND BIRTH = #{MB_RLNO}
				</if>
				AND MB_INTG_NO IS NULL
		) TBL
		ON(
			FHS.NA_BZPLC = TBL.NA_BZPLC
			AND FHS.FHS_ID_NO = TBL.FHS_ID_NO
			AND FHS.FARM_AMNNO = TBL.FARM_AMNNO
		)
		WHEN MATCHED THEN
			UPDATE
			SET FHS.LSCHG_DTM = SYSDATE 
				, FHS.MB_INTG_NO =#{MB_INTG_NO}	
	</update>
	
	<insert id="insertMmConnHistory" parameterType="map">
		/*LoginMapper.insertMmConnHistory_20230104_추가*/
		<selectKey keyProperty="connSeq" resultType="int" order="BEFORE">
			SELECT NVL(MAX(CONN_SEQ) + 1, 1)
			  FROM TB_LA_IS_MM_CONN_HIST
			  WHERE CONN_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
		</selectKey>
		INSERT INTO TB_LA_IS_MM_CONN_HIST(
			CONN_DT
			, CONN_SEQ
			, CONN_GBCD
			, NA_BZPLC
			, LOGIN_ID
			<if test="mbIntgNo != null and mbIntgNo != ''">
			, MB_INTG_NO
			</if>
			, CONN_CHN
			, INOUT_GB
			, CONN_IP
			, INOUT_DTM
		)
		VALUES(
			TO_CHAR(SYSDATE, 'YYYYMMDD')
			, #{connSeq}
			, #{connGbcd}
			, #{naBzPlc}
			, #{loginId}
			<if test="mbIntgNo != null and mbIntgNo != ''">
			, #{mbIntgNo}
			</if>
			, #{connChannel}
			, #{inOutGb}
			, #{connIP}
			, SYSDATE
		)
	</insert>
</mapper>